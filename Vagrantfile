# -*- mode: ruby -*-
# vi: set ft=ruby :

nodes = [
  { :hostname => 'vagrant_pentest01',  
    :ip => '192.168.109.101', 
    :box => 'ubuntu/bionic64',
    :forward => '9101', 
    :ram => 4096, 
    :cpus => 2, 
  },
]



$bootstrap = <<-SCRIPT
  #!/usr/bin/env bash

  set -euo pipefail # strict mode
  #set -x

  debug_echo() {
    echo "*********************************"
    echo "TASK: $@"
    echo "*********************************"
    echo "   "
  }

  apt_update() {
    last_update=$(stat -c %Y /var/cache/apt/pkgcache.bin)
    now=$(date +%s)
    if [ $((now - last_update)) -gt 3600 ]; then
      sudo apt-get update
    fi
  }

  apt_install() {
    apt_update

    install='no'

    perl_dpkg_find=$(cat <<'HERE'
      my $installed=0;
      my $found=0;

      my $dpkg_stdout = qx(dpkg --get-selections | grep ${pkgname} 2>/dev/null);
      my $dpkg_rc = $? >> 8;

      if ($dpkg_rc == 0) {
        $installed=1;
        $found=1;
        print "INSTALLED\n";
        exit(0);
      } 

      if ($dpkg_rc != 0) {
        my $text = "Verify that apt-cache finds it at all";
        my $apt_search_stdout = qx(sudo apt-cache search . | grep ${pkgname});

        my $apt_search_rc = $? >> 8;

        if ($apt_search_rc == 0) {
          print "NOT_INSTALLED\n";
        } else {
          print "NOT_FOUND\n";
        }
      }

HERE
    )

    for pkg in "${@}"; do
      #echo -en "*** Apt install: ||${pkg}||"
      check_pkg=$(perl -s -e "${perl_dpkg_find}" -- -pkgname="${pkg}")
      echo "*** ${check_pkg} ||${pkg}|| "

      if [[ ${check_pkg} == 'NOT_INSTALLED' ]]; then
        install='yes'
        sudo apt-get install -y "${pkg}"
      fi

    done




  }

  install_ansible() {
    local ansible_apps=(
      build-essential
      software-properties-common 
      
      gcc
      python3-setuptools 
      python3-pip
      python3-dev 

    )

    debug_echo "Apt manual update"
    sudo apt-get update

    echo 'libssl1.1 libraries/restart-without-asking boolean true' | sudo debconf-set-selections
    sudo debconf-show libssl1.1
    sudo apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" -qq -y install libssl1.1


    debug_echo "Apt install ansible prereqs"
    apt_install "${ansible_apps[@]}"

    debug_echo "Pip install ansible"
    if ! which ansible >/dev/null 2>&1; then 
      #sudo pip3 install ansible
      sudo pip3 install ansible==2.9.5
    fi

    debug_echo "Done installing ansible"
  }


  install_pyenv() {
    debug_echo "Apt install pyenv prereqs"
    local pyenv_apps=(
      make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
    )
    
    apt_install "${pyenv_apps[@]}"

    su -c "whoami" vagrant


    # add to bashrc
    debug_echo "Add pyenv to bashrc"
    if [[ ! -d "/home/vagrant/.pyenv/" ]]; then

      debug_echo "Apt install pyenv"
      su -c "curl https://pyenv.run | bash" vagrant

      echo -en 'export PATH="/home/vagrant/.pyenv/bin:$PATH"\neval "$(pyenv init -)"\neval "$(pyenv virtualenv-init -)"' >> /home/vagrant/.bashrc

      debug_echo "pyenv install completed"

    fi

  }


  install_pipenv() {

    su -c "which pipenv" vagrant || {

      debug_echo "Install pipenv in vagrant user"
      su -c "pip3 install pipenv --user" vagrant

      ## support pip --user in path
      echo -en '\n[[ -d $HOME/.local/bin ]] && {\n  PATH="$HOME/.local/bin:$PATH"\n}' >> /home/vagrant/.bashrc

      debug_echo "pipenv installed"

    }

  }


  run() {
    install_ansible
    #install_pyenv
    #install_pipenv
  }

  time run

SCRIPT

Vagrant.configure("2") do |config|
  nodes.each do |node|
    config.vm.define node[:hostname] do |nodeconfig|
      nodeconfig.vm.box = node[:box] ? node[:box] : "ubuntu/trusty64"
      nodeconfig.vm.network :private_network, ip: node[:ip]
      nodeconfig.vm.network :forwarded_port, guest: 22, host: node[:forward], id: 'ssh'

      ## disable for wsl
      #nodeconfig.vm.synced_folder '.', '/vagrant', disabled: true


      memory = node[:ram]  ? node[:ram]  : 256;
      cpus   = node[:cpus] ? node[:cpus] : 1;

      

      nodeconfig.vm.provider :virtualbox do |vb|

        # fix for wsl
        vb.customize [ "modifyvm", :id, "--uartmode1", "disconnected" ]


        vb.customize [
          "modifyvm", :id,
          "--cpuexecutioncap", "90",
          "--cpus", cpus.to_s,
          "--memory", memory.to_s,
        ]


        #vb.gui = true

      end
    end

    config.vm.provision "shell", inline: $bootstrap


#    #if node[:hostname] == 'jenkins-master'
      config.vm.provision "ansible_local" do |ansible|
        ansible.playbook = "site.yml"
        ansible.compatibility_mode = "2.0"
        ansible.install = false
        #ansible.verbose = "vv"
        #ansible.become = true
      end
#      #config.vm.synced_folder ".", "/vagrant"
#    #end

  end
end
